* Emiliano Grilli's emacs configuration

The aim of this repository is to provide an emacs configuration that where possible leverages emacs built-in functionality, making it easy to bisect into a "vanilla" minimal configuration if needed.

A similar "keep-it-simple" approach to the [[https://github.com/ISouthRain/OpenEmacs][openEmacs]] project, from which I took some ideas. Also [[https://protesilaos.com/][Protesilaos Stavrou]] configuration has been a great inspiration.

This file (README.org) contains the configuration of emacs in a literate programming style, meaning that the code is inside this very file and is /tangled/ into the target files.

To do the tangling you invoke `M-x org-babel-tangle` and org-babel will produce the final ~.el~ files:

- early-init.el
- init.el
- provided-by-debian.el
- provided-by-gnu-nongnu-melpa.el


** Built-in emacs configuration
I'd like to separate the configuration in three sections, this one should contain only built-in functionality, and should work in /vanilla/ emacs straight out of the box (assuming a fairly recent version of emacs, at the moment of this writing I'm using version 30.1 that comes with debian 13.0 trixie). On android for example I want emacs as close to possible to vanilla.

I use debian stable since many years as my daily driver GNU/Linux distro, and always update it when a new stable come out. I was used to compile emacs from sources, as the version included in debian stable was too old. But now in trixie there is a fairly current version, good enough for my needs at least.

So this section deals with what you can obtain with the stock debian package:

On debian you install emacs like this:

#+begin_src bash
  sudo apt install emacs
#+end_src


*** Startup

Took this bit from prot, it goes to ~early-init.el~ to speed up emacs startup time.

#+begin_src elisp :tangle early-init.el
  ;; Temporarily increase the garbage collection threshold.  These
  ;; changes help shave off about half a second of startup time.  The
  ;; `most-positive-fixnum' is DANGEROUS AS A PERMANENT VALUE.  See the
  ;; `emacs-startup-hook' a few lines below for what I actually use.
  (setq gc-cons-threshold most-positive-fixnum
    gc-cons-percentage 0.5)

  ;; Same idea as above for the `file-name-handler-alist' and the
  ;; `vc-handled-backends' with regard to startup speed optimisation.
  ;; Here I am storing the default value with the intent of restoring it
  ;; via the `emacs-startup-hook'.
  (defvar prot-emacs--file-name-handler-alist file-name-handler-alist)
  (defvar prot-emacs--vc-handled-backends vc-handled-backends)

  (setq file-name-handler-alist nil
    vc-handled-backends nil)

  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-threshold (* 100 100 8)
        gc-cons-percentage 0.1
        file-name-handler-alist prot-emacs--file-name-handler-alist
        vc-handled-backends prot-emacs--vc-handled-backends)))

#+end_src

*** Preamble
#+begin_src elisp :tangle init.el
  ;; Emiliano Grilli's Emacs configuration

  ;; Vanilla emacs section (init.el):
  ;; it shoud work without requiring any external package
  ;; tested on emacs 30.1 on debian 13 trixie

#+end_src


*** Basic configuration

Here I set some native emacs variables to fine tune its behaviour to how I like it:

- ~Man-notify-method 'aggressive~ basically opens the man pages invoked by ~M-x man~ in the other window and gives it the focus, so you can read and move inside the man immediately, eventually hit ~q~ to exit and you are back to where you were before invoking man.
- ~auto-revert-verbose t~ it shows on the echo area when something outside emacs has changed a file and the buffer has been auto-reverted to what is on disk.
- ~auto-save-default nil~ disables the auto save feature that produces `#foo.txt#` files until you save explicitly the file.
- ~create-lockfiles nil~ don't create locks starting with ".#" when you edit a file.
- ~desktop-save t~ saves your open files/buffers when you quit emacs so when you launch emacs again it has all your "desktop" as you left it.
- ~help-window-select t~ similar to man, I want the help window to have the focus so I can quickly read and quit with ~q~
- ~inhibit-splash-screen t~ disables the splash screen on start
- ~initial-scratch-message nil~ gives you an empty scratch buffer on start
- ~lisp-indent-offset 2~ lisp code indentation
- ~make-backup-files nil~ skip creation of backup files
- ~ring-bell-function 'ignore~ no bell
- ~shell-kill-buffer-on-exit t~ when I exit a shell, I don't want an useless buffer to kill manually
- ~use-short-answers t~ use y or n instead of yes and no
- ~visible-bell t~ flash the screen instead of sounding a bell


#+begin_src elisp :tangle init.el
  ;; Setting some variables
  (setq
    Man-notify-method 'aggressive
    auto-revert-verbose t
    auto-save-default nil
    create-lockfiles nil
    desktop-save t
    help-window-select t
    inhibit-splash-screen t
    initial-scratch-message nil
    lisp-indent-offset 2
    make-backup-files nil
    ring-bell-function 'ignore
    shell-kill-buffer-on-exit t
    use-short-answers t
    visible-bell t)

  (setq-default
    indent-tabs-mode nil
    tab-width 4)

  (set-default indent-line-function 'insert-tab)

  ;; send customizations away from init.el (prot)
  (setq custom-file (make-temp-file "emacs-custom-"))
#+end_src


*** Minor modes

Here are some minor modes that I use and some that I disable.
Note: ~fido-vertical-mode~ may be enabled if you don't use ~vertico~ (below)

#+begin_src elisp :tangle init.el
  ;; Minor modes
  (column-number-mode 1)
  (delete-selection-mode 1)
  (desktop-save-mode 1)
  (electric-indent-mode 1)
  (electric-pair-mode 1)
  (fido-vertical-mode -1)
  (global-auto-revert-mode 1)
  (global-completion-preview-mode 1)
  (global-visual-line-mode 1)
  (menu-bar-mode -1)
  (recentf-mode 1)
  (repeat-mode 1)
  (scroll-bar-mode -1)
  (size-indication-mode 1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (which-key-mode 1)
#+end_src


**** Electric pair mode configuration
Here basically I add the /backtick/ ("`") to the list of characters that electric-pair-mode should treat as a pair.
#+begin_src elisp :tangle init.el
  ;; Electric pair also for backtick
  (setq electric-pair-pairs
    (quote
      ((34 . 34)
        (8216 . 8217)
        (8220 . 8221)
        (96 . 96))))
#+end_src


*** Appearance
Here I use two of the built-in [[https://protesilaos.com/emacs/modus-themes][modus-themes]] made by [[https://protesilaos.com/][Protesilaos Stavrou]], very clean and professional. And thoroughly documented in [[info:modus-themes#Top][its info manual]].

These themes allow you to use variable pitch fonts, which give you bigger fonts on GUI emacs for titles, org headings, and so on. Nice.

#+begin_src elisp :tangle init.el
  ;; Theme
  (setq modus-themes-headings
    '((1 . (variable-pitch 1.8))
       (2 . (1.5))
       (agenda-date . (1.5))
       (agenda-structure . (variable-pitch light 1.8))
       (t . (1.3))))
  (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted))

  (load-theme 'modus-vivendi-tinted)

  ;; Font
  (set-frame-font "Hack-15")
  (set-face-attribute 'default t :font "Hack-15")
  (add-to-list 'default-frame-alist '(font . "Hack-15" ))

  ;; Start maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


*** Window title

Shows in the title bar the name of the buffer and the last command used.

Took this from openEmacs.

#+begin_src elisp :tangle init.el
  (setq frame-title-format
    '(:eval (format "Emacs - %s  [ %s ]"
              (buffer-name)
              last-command))
    icon-title-format t)
#+end_src


*** Windmove

Usually I move into other window with `C-x o` but sometimes useful to move precisely to a window with the arrows, and to swap windows around.

#+begin_src elisp :tangle init.el
  ;; Windmove
  (defun windmove-prefix ()
    (interactive)
    (set-transient-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "<left>") 'windmove-left)
        (define-key map (kbd "<right>") 'windmove-right)
        (define-key map (kbd "<up>") 'windmove-up)
        (define-key map (kbd "<down>") 'windmove-down) map)
      t nil "Repeat with %k"))

  (define-key (current-global-map) (kbd "C-x w m") 'windmove-prefix)

  (defun windmove-swap-prefix ()
    (interactive)
    (set-transient-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "<left>") 'windmove-swap-states-left)
        (define-key map (kbd "<right>") 'windmove-swap-states-right)
        (define-key map (kbd "<up>") 'windmove-swap-states-up)
        (define-key map (kbd "<down>") 'windmove-swap-states-down) map)
      nil))

  (define-key (current-global-map) (kbd "C-x w p") 'windmove-swap-prefix)
#+end_src


*** Key bindings
#+begin_src elisp :tangle init.el
  ;; Key bindings
  (global-set-key (kbd "C-;") 'comment-line)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "s-+") 'text-scale-increase)
  (global-set-key (kbd "s--") 'text-scale-decrease)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-+") 'mark-word)
#+end_src

*** Save history

Save the minibuffer history so that it survives between emacs sessions.

#+begin_src elisp :tangle init.el
  ;; Save history
  (use-package savehist
    :ensure nil
    :hook  (after-init . savehist-mode))
#+end_src


*** Org mode

Minimalistic config, for the moment.

#+begin_src elisp :tangle init.el
  ;; Org mode
  (use-package org
    :ensure nil
    :defer t
    :config
    (setq
      org-agenda-include-diary t
      org-confirm-babel-evaluate nil
      org-ctrl-k-protect-subtree t
      org-cycle-separator-lines 0
      org-ellipsis " â¤µ"
      org-hide-emphasis-markers t
      org-log-done 'time
      org-startup-indented t
      org-startup-folded 'showall)
    :bind
    ("C-c l" . org-store-link))
#+end_src


*** Italian calendar/diary localization

As I'm italian, I need some customization to make calendar/diary read in my language.

Here I have some very old code for localization of the calendar/diary experience in Italian; I don't know if there is a more modern/better way to do it...

#+begin_src elisp :tangle init.el
  ;; Italian calendar names
  (setq calendar-week-start-day 1
    calendar-day-name-array ["Domenica" "LunedÃ¬" "MartedÃ¬" "MercoledÃ¬"
                              "GiovedÃ¬" "VenerdÃ¬" "Sabato"]
    calendar-day-abbrev-array ["Dom" "Lun" "Mar" "Mer" "Gio" "Ven" "Sab"]
    calendar-day-header-array ["Do" "Lu" "Ma" "Me" "Gi" "Ve" "Sa"]
    calendar-month-name-array ["Gennaio" "Febbraio" "Marzo" "Aprile"
                                "Maggio" "Giugno" "Luglio" "Agosto"
                                "Settembre" "Ottobre" "Novembre"
                                "Dicembre"]
    calendar-month-abbrev-array ["Gen" "Feb" "Mar" "Apr" "Mag"
                                  "Giu" "Lug" "Ago"
                                  "Set" "Ott" "Nov" "Dic"]
    calendar-date-style 'european)

  ;; Italian Holidays
  (setq holiday-general-holidays
    '((holiday-fixed 1 1 "Capodanno")
       (holiday-fixed 5 1 "Festa dei lavoratori")
       (holiday-fixed 4 25 "Festa della liberazione")
       (holiday-fixed 6 2 "Festa della repubblica")
       ))

  (setq holiday-christian-holidays
    '((holiday-fixed 12 8 "Immacolata concezione")
       (holiday-fixed 12 25 "Natale")
       (holiday-fixed 12 26 "Santo Stefano")
       (holiday-fixed 1 6 "Epifania")
       (holiday-easter-etc -52 "GiovedÃ¬ grasso")
       (holiday-easter-etc -47 "MartedÃ¬ grasso")
       (holiday-easter-etc  -2 "VenerdÃ¬ Santo")
       (holiday-easter-etc   0 "Pasqua")
       (holiday-easter-etc  +1 "LunedÃ¬ di Pasqua")
       (holiday-fixed 8 15 "Assunzione di Maria")
       (holiday-fixed 11 1 "Ognissanti")))

  (setq calendar-holidays
    (append holiday-christian-holidays holiday-general-holidays))

  ;; Disable other holidays
  (setq hebrew-holidays nil)
  (setq islamic-holidays nil)
  (setq oriental-holidays nil)
  (setq general-holidays nil)

  ;; Other calendar/diary goodies
  (setq cal-tex-diary t)
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag t)
#+end_src

*** Custom toggles for white space mode and line numbers

I generally don't want line numbers on everything, so I have a quick one key toggle for enabling ~display-line-numbers-mode~ in the current buffer.

Similarly, I have another for ~whitespace-mode~ and one for ~visual-line-mode~

#+begin_src elisp :tangle init.el
  ;; Custom toggles
  (defun mil/toggle-line-numbers (args)
    "toggles display-line-numbers-mode"
    (interactive "P")
    (if (bound-and-true-p display-line-numbers-mode)
      (display-line-numbers-mode -1)
      (display-line-numbers-mode 1)))

  (defun mil/toggle-whitespace (args)
    "toggles whitespace-mode"
    (interactive "P")
    (if (bound-and-true-p whitespace-mode)
      (whitespace-mode -1)
      (whitespace-mode 1)))

  (defun mil/toggle-visual-line-mode (args)
    "toggles visual-line-mode"
    (interactive "P")
    (if(bound-and-true-p visual-line-mode)
      (visual-line-mode -1)
      (visual-line-mode 1)))

  (global-set-key (kbd "<f12>") 'mil/toggle-line-numbers)
  (global-set-key (kbd "S-<f12>") 'mil/toggle-whitespace)
  (global-set-key (kbd "C-<f12>") 'mil/toggle-visual-line-mode)
#+end_src


** Packages available in debian

This section is dedicated to the configuration of packages that are available in debian as separate .deb packages.

For example, for some licensing issues the emacs info manuals are not included with the basic emacs debian package as you would get them if you compile emacs from source, but are instead in the component ~non-free~, that you have to enable in your [[https://wiki.debian.org/SourcesList][apt configuration]].

After that you can install the info manuals with

#+begin_src bash
  sudo apt install emacs-common-non-dfsg
#+end_src

Debian repositories offer many other packages whose name begin with ~elpa-*~: those are emacs packages in .deb format, ready to be installed via ~apt~.

`Elpa` is an acronym for /Emacs Lisp Package Archive/, and it contains lots of emacs packages that with a bit of configuration you can install directly from emacs with ~M-x package-install~, but in debian you have the option of installing them as system packages.

Having them as system packages managed by the debian package manager in my opinion it's better for various reasons:

- If a package entered debian the community judged it deserved to be in, and it's a good thing.
- Each user in the system have the package whithout having to install it from outside.
- Stability: instead of the latest and greatest you have the working one.
- You don't have conflicting versions of a package in your emacs directory.
- You don't have to compile dependecies manually (eg. libvterm).
- Dependencies are managed by the system.

So these packages have ~ensure: nil~ and ~pin: manual~ in their use-package config.

*** Including the next section
#+begin_src elisp :tangle init.el
  ;; Loads the section of the configuration dedicated to emacs packages
  ;; available in debian, comment the next line for disabling it.
  (load-file (locate-user-emacs-file "provided-by-debian.el"))
#+end_src

*** Vterm

Vterm is a complete terminal emulator that unlike ~shell~, ~term~ and ~eshell~ is able to handle any external program output.

To install the debian package:

#+begin_src bash
  sudo apt install elpa-vterm
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; Begin section of emacs packages available in debian
  ;; usually they begin with elpa-*

  ;; sudo apt install elpa-vterm
  (use-package vterm
    :ensure nil
    :pin manual)
#+end_src

*** Magit
Emacs vanilla already has excellent version control capabilities, but if you use git as vcs, magit is one of the best if not the best user interfaces available.

To install the debian package and its dependencies:

#+begin_src bash
  sudo apt install elpa-magit elpa-magit-section elpa-transient elpa-llama elpa-with-editor
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-magit elpa-magit-section elpa-transient elpa-llama elpa-with-editor
  (use-package magit
    :ensure nil
    :pin manual
    :bind
    ("<f9>" . magit-status))

  (use-package magit-section
    :ensure nil
    :pin manual)

  (use-package transient
    :ensure nil
    :pin manual)

  (use-package llama
    :ensure nil
    :pin manual)

  (use-package with-editor
    :ensure nil
    :pin manual)

#+end_src



*** Format all
Auto formatting of source code in many languages.

Install the debian package and its dependencies:
#+begin_src bash
  sudo apt install elpa-format-all elpa-inheritenv elpa-language-id
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-format-all elpa-inheritenv elpa-language-id
  (use-package format-all
    :ensure nil
    :pin manual
    :bind
    ("M-F" . format-all-buffer))

  (use-package inheritenv
    :ensure nil
    :pin manual)

  (use-package language-id
    :ensure nil
    :pin manual)
#+end_src

*** Helpful

Helpful offers a better Help buffer.

To install the debian package and its dependencies:

#+begin_src bash 
  sudo apt install elpa-helpful elpa-dash elpa-f elpa-s elpa-elisp-refs
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-helpful elpa-dash elpa-f elpa-s elpa-elisp-refs
  (use-package helpful
    :ensure nil
    :pin manual
    :bind
    (("C-h f" . helpful-callable)
      ("C-h v" . helpful-variable)
      ("C-h k" . helpful-key)))

  (use-package s
    :ensure nil
    :pin manual)

  (use-package f
    :ensure nil
    :pin manual)

  (use-package dash
    :ensure nil
    :pin manual)

  (use-package elisp-refs
    :ensure nil
    :pin manual)
#+end_src

*** Vertico
Vertico gives a better experience when interacting with the minibuffer.

To install the debian package:

#+begin_src bash
  sudo apt install elpa-vertico
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-vertico
  (use-package vertico
    :ensure nil
    :pin manual
    :hook (after-init . vertico-mode)
    :bind (:map vertico-map
            ("DEL" . vertico-directory-delete-char))
    :custom
    (vertico-count 10))
#+end_src

*** Orderless
Orderless allow you to search regardless of the order of your search terms.

To install the debian package:

#+begin_src bash
  sudo apt install elpa-orderless
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-orderless
  (use-package orderless
    :ensure nil
    :pin manual
    :config
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Marginalia

Marginalia adds useful in-line docs/information in the minibuffer for each of the candidates.

To install the debian package:

#+begin_src bash
  sudo apt install elpa-marginalia
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-marginalia
  (use-package marginalia
    :ensure nil
    :pin manual
    :hook (after-init . marginalia-mode))
#+end_src

*** Consult

Consult provides enhanced replacements for common commands such switch-to-buffer, grep, etc.. and you can see the preview of the thing you are choosing.

To install the debian package:

#+begin_src bash
  sudo apt install elpa-consult
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-consult
  (use-package consult
    :ensure nil
    :pin manual
    :bind
    (([remap switch-to-buffer] . consult-buffer)
      ([remap goto-line] . consult-goto-line)
      ([remap project-switch-to-buffer] . consult-project-buffer)
      ([remap yank-pop] . consult-yank-pop)
      ([remap bookmark-jump] . consult-bookmark)
      ("M-g o" . consult-outline)
      ("M-s g" . consult-grep)
      ("M-s G" . consult-git-grep)
      ("M-s r" . consult-ripgrep)
      ("M-s l" . consult-line)
      ("M-s L" . consult-line-multi)
      ("M-s k" . consult-keep-lines)
      ("M-s u" . consult-focus-lines)
      ("M-s l" . consult-line)))
#+end_src

*** Expand region

Expand the selected region by semantic units.

To install the debian package:

#+begin_src bash
  sudo apt install elpa-expand-region
#+end_src

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-expand-region
  (use-package expand-region
    :ensure nil
    :pin manual
    :bind
    ("M-@" . er/expand-region))
#+end_src

*** Markdown mode
Occasionally you need to edit markdown files.

Install the debian package:
#+begin_src bash
  sudo apt install elpa-markdown-mode
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-markdown-mode
  (use-package markdown-mode
    :ensure nil
    :pin manual)
#+end_src

*** Ledger mode

To install the debian package:

#+begin_src bash
  sudo apt install elpa-ledger
#+end_src

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-ledger
  (use-package ledger-mode
    :ensure nil
    :pin manual)
#+end_src

*** Org roam

Org roam is a tool to build a "zettelkasten", or knowledge base, by inter linking notes.

To install the debian package and its dependencies:

#+begin_src bash
  sudo apt install elpa-org-roam elpa-emacsql elpa-emacsql-sqlite org-roam-doc
#+end_src

Emacs lisp configuration:

#+begin_src elisp :tangle provided-by-debian.el
  ;; sudo apt install elpa-org-roam elpa-emacsql elpa-emacsql-sqliteorg-roam-doc
  (use-package org-roam
    :ensure nil
    :pin manual
    :custom
    (org-roam-completion-everywhere t)
    :bind
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n g" . org-roam-graph)
    ("C-c n i" . org-roam-node-insert)
    ("C-c n c" . org-roam-capture))
#+end_src

*** TODO Corfu

*** TODO Deft

** Packages from external repositories

This section is for packages that aren't present in debian but are useful (to me).

There are three main package archives that host emacs packages: *gnu* (elpa), *nongnu* which are usually natively configured in emacs, and *melpa* which is sort of an "unofficial" but huge repo.

*** Including the next section
#+begin_src elisp :tangle provided-by-debian.el
  ;; Loads the section of the configuration dedicated to emacs packages
  ;; available in gnu/nongnu/melpa, comment the next line for disabling it.
  (load-file (locate-user-emacs-file "provided-by-gnu-nongnu-melpa.el"))
#+end_src

*** Configure the packages archives

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (setq package-archives
    '(("gnu" . "https://elpa.gnu.org/packages/")
       ("nongnu" . "https://elpa.nongnu.org/nongnu/")
       ("melpa" . "https://melpa.org/packages/")))
#+end_src

  
*** Treesitter config
Treesit needs a list of sources to fetch language grammar to compile, technically they aren't emacs packages repositories but they are nonetheless external sources.

To find a comprehensive list of languages see the [[https://github.com/emacs-tree-sitter/tree-sitter-langs][tree-sitter-langs]] repository.

Install/compile language grammars with `M-x treesit-install-language-grammar`.

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (setq treesit-language-source-alist
    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (cmake "https://github.com/uyha/tree-sitter-cmake")
       (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (go "https://github.com/tree-sitter/tree-sitter-go")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (toml "https://github.com/tree-sitter/tree-sitter-toml")
       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
       (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

#+end_src


*** Ef-themes
A great set of themes from prot, more colorful than modus-themes, I particularly like and used for a long time ~ef-symbiosis~.

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package ef-themes
    :ensure t
    :config
    (setq ef-themes-headings
      '((1 semibold  variable-pitch 1.6)
         (2 regular 1.4)
         (3 regular 1.3)
         (agenda-date 1.4)
         (agenda-structure variable-pitch light 1.6)
         (t variable-pitch))))
#+end_src

*** Org-journal
Org journal helps keeping a journal in org mode, integrated with the emacs calendar.

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package org-journal
    :ensure t
    :after org
    :pin nongnu
    :custom
    (org-journal-dir (concat (file-name-as-directory org-directory) "journal"))
    (org-journal-file-type 'yearly)
    (org-journal-file-format "%Y.org")
    (org-journal-date-format "%A, %d-%m-%Y")
    (org-journal-encrypt-journal nil)
    (org-journal-enable-encryption nil)
    (org-journal-enable-agenda-integration t)
    (org-extend-today-until 4)
    :bind
    ("C-c j" . org-journal-new-entry))

#+end_src

*** Restclient
Restclient is a handy package to make REST calls. Very useful to test out remote APIs.

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package restclient
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.restclient\\'" . restclient-mode))
    (add-to-list 'auto-mode-alist '("\\.rest\\'" . restclient-mode)))

  (use-package ob-restclient
    :ensure t)
#+end_src

*** Multiple-cursors
Multiple cursors lets you edit mutliple lines ad once.
#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package multiple-cursors
    :ensure t
    :pin nongnu
    :init
    (defun multiple-cursors-prefix ()
      (interactive)
      (set-transient-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "n") 'mc/mark-next-like-this)
          (define-key map (kbd "p") 'mc/mark-previous-like-this)
          (define-key map (kbd "a") 'mc/mark-all-like-this) map)
        t nil "Repeat with %k"))

    (define-key (current-global-map) (kbd "C-x n") 'multiple-cursors-prefix)

    :bind
    (("C-c u" . mc/edit-lines)))
#+end_src


*** Dired-subtree
From [[https://protesilaos.com/emacs/dotemacs#h:3a4a29bc-3491-4d01-9d64-1cef63b3116a][prot config file]] a nice enhancement to dired: you can expand subdirectories with <TAB>.

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
#+end_src

*** Scratch
Produces a new empty buffer with the same mode of the one you're on.

#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package scratch
    :ensure t
    :bind (("C-c s" . scratch)))
#+end_src

*** Drag-stuff
#+begin_src elisp :tangle provided-by-gnu-nongnu-melpa.el
  (use-package drag-stuff
    :ensure t
    :config
    (drag-stuff-define-keys)
    (add-to-list 'drag-stuff-except-modes 'org-mode)
    :hook (after-init . drag-stuff-global-mode))
#+end_src

*** TODO String inflection
*** TODO Chordpro mode
*** TODO Abc mode
