* Emacs minimal configuration

The aim of this repository is to provide a minimal emacs configuration that restricts the use external packages, trying to leverage emacs built-in functionality.

A similar approach of the [[https://github.com/ISouthRain/OpenEmacs][openEmacs]] project, from which I took some ideas. Also [[https://protesilaos.com/][Protesilaos Stavrou]] configuration has been a great inspiration.

This file (README.org) contains the configuration of emacs in a literate programming style, meaning that the code is inside this very file and is /tangled/ into the target file, init.el.

To do the tangling you invoke `M-x org-babel-tangle` and org-mode (org-babel, to be precise) will produce the `init.el` file


** Built-in emacs configuration
*** Startup
Took this bit from prot, to speed up emacs startup time.
#+begin_src emacs-lisp :tangle early-init.el
  ;; Temporarily increase the garbage collection threshold.  These
  ;; changes help shave off about half a second of startup time.  The
  ;; `most-positive-fixnum' is DANGEROUS AS A PERMANENT VALUE.  See the
  ;; `emacs-startup-hook' a few lines below for what I actually use.
  (setq gc-cons-threshold most-positive-fixnum
    gc-cons-percentage 0.5)

  ;; Same idea as above for the `file-name-handler-alist' and the
  ;; `vc-handled-backends' with regard to startup speed optimisation.
  ;; Here I am storing the default value with the intent of restoring it
  ;; via the `emacs-startup-hook'.
  (defvar prot-emacs--file-name-handler-alist file-name-handler-alist)
  (defvar prot-emacs--vc-handled-backends vc-handled-backends)

  (setq file-name-handler-alist nil
    vc-handled-backends nil)

  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-threshold (* 100 100 8)
        gc-cons-percentage 0.1
        file-name-handler-alist prot-emacs--file-name-handler-alist
        vc-handled-backends prot-emacs--vc-handled-backends)))

#+end_src

*** Basic configuration
Here I set some native emacs variables to fine tune its behaviour to how I like it:
- ~Man-notify-method 'aggressive~ basically opens the man pages invoked by ~M-x man~ in the other window and gives it the focus, so you can read and move inside the man immediatly, eventually hit ~q~ to exit and you are back to where you were before invoking man.
- ~auto-revert-verbose t~ it shows on the echo area when something outside emacs has changed a file and the buffer has been auto-reverted to what is on disk.
- ~create-lockfiles nil~ don't create locks starting with ".#" when you edit a file.
- ~desktop-save t~ saves your open files/buffers when you quit emacs so when you launch emacs again it has all your "desktop" as you left it.
- ~help-window-select t~ similar to man, I want the help window to have the focus so I can quickly read and quit with ~q~
- ~inhibit-splash-screen t~ disables the splash screen on start
- ~initial-scratch-message nil~ gives you an empty scratch buffer on start
- ~lisp-indent-offset 2~ lisp code indentation
- ~make-backup-files nil~ skip creation of backup files
- ~ring-bell-function 'ignore~ no bell
- ~shell-kill-buffer-on-exit t~ when I exit a shell, I don't want an useless buffer to kill manually
- ~use-short-answers t~ use y or n instead of yes and no
- ~visible-bell t~ flash the screen instead of sounding a bell

#+begin_src elisp :tangle init.el
  ;; Setting some variables
  (setq
    Man-notify-method 'aggressive
    auto-revert-verbose t
    create-lockfiles nil
    desktop-save t
    help-window-select t
    inhibit-splash-screen t
    initial-scratch-message nil
    lisp-indent-offset 2
    make-backup-files nil
    ring-bell-function 'ignore
    shell-kill-buffer-on-exit t
    use-short-answers t
    visible-bell t)

  (setq-default
    indent-tabs-mode nil
    tab-width 4)

  (set-default indent-line-function 'insert-tab)

#+end_src


*** Minor modes
#+begin_src elisp :tangle init.el
  ;; Minor modes
  (column-number-mode 1)
  (delete-selection-mode 1)
  (desktop-save-mode 1)
  (electric-indent-mode 1)
  (electric-pair-mode 1)
  (fido-vertical-mode 1)
  (global-auto-revert-mode 1)
  (global-completion-preview-mode 1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (size-indication-mode 1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (which-key-mode 1)
#+end_src


**** Electric pair mode configuration
Here basically I add the /backtick/ ("`") to the list of characters that electric-pair-mode should treat as a pair.
#+begin_src elisp :tangle init.el
  ;; Electric pair also for backtick
  (setq electric-pair-pairs
    (quote
      ((34 . 34)
        (8216 . 8217)
        (8220 . 8221)
        (96 . 96))))
#+end_src


*** Appearance
Here I use two of the built-in [[https://protesilaos.com/emacs/modus-themes][modus-themes]] made by [[https://protesilaos.com/][Protesilaos Stavrou]], very clean and professional. And thoroughly documented in [[info:modus-themes#Top][its info manual]].

These themes allow you to use variable pitch fonts, which give you bigger fonts on GUI emacs for titles, org headings, and so on. Nice.
#+begin_src elisp :tangle init.el
  ;; Theme
  (setq modus-themes-headings
    '((1 . (variable-pitch 1.8))
       (2 . (1.5))
       (agenda-date . (1.5))
       (agenda-structure . (variable-pitch light 1.8))
       (t . (1.3))))
  (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted))
  (load-theme 'modus-vivendi-tinted)

  ;; Font
  (set-frame-font "Hack-15")
  (set-face-attribute 'default t :font "Hack-15")
  (add-to-list 'default-frame-alist '(font . "Hack-15" ))

  ;; Start maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


*** Window title
Shows in the title bar the name of the buffer and the last command used.
#+begin_src elisp :tangle init.el
  (setq frame-title-format
    '(:eval (format "Emacs - %s  [ %s ]"
              (buffer-name)
              last-command))
    icon-title-format t)
#+end_src


*** Key bindings
#+begin_src elisp :tangle init.el
  ;; Key bindings
  (global-set-key (kbd "C-;") 'comment-line)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "s-+") 'text-scale-increase)
  (global-set-key (kbd "s--") 'text-scale-decrease)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

*** Org mode
#+begin_src elisp :tangle init.el
  ;; Org mode
  (use-package org
    :defer t
    :config
    (setq
      org-agenda-include-diary t
      org-confirm-babel-evaluate nil
      org-ctrl-k-protect-subtree t
      org-cycle-separator-lines 0
      org-ellipsis " ⤵"
      org-hide-emphasis-markers t
      org-log-done 'time
      org-startup-indented t
      org-startup-folded 'showall))

#+end_src


*** Italian calendar/diary localization
Here I have some very old code for localization of the calendar/diary experience in Italian; I don't know if there is a more modern/better way to do it...
#+begin_src elisp :tangle init.el
  ;; Italian calendar names
  (setq calendar-week-start-day 1
    calendar-day-name-array ["Domenica" "Lunedì" "Martedì" "Mercoledì"
                              "Giovedì" "Venerdì" "Sabato"]
    calendar-day-abbrev-array ["Dom" "Lun" "Mar" "Mer" "Gio" "Ven" "Sab"]
    calendar-day-header-array ["Do" "Lu" "Ma" "Me" "Gi" "Ve" "Sa"]
    calendar-month-name-array ["Gennaio" "Febbraio" "Marzo" "Aprile"
                                "Maggio" "Giugno" "Luglio" "Agosto"
                                "Settembre" "Ottobre" "Novembre"
                                "Dicembre"]
    calendar-month-abbrev-array ["Gen" "Feb" "Mar" "Apr" "Mag"
                                  "Giu" "Lug" "Ago"
                                  "Set" "Ott" "Nov" "Dic"]
    calendar-date-style 'european)

  ;; Italian Holidays
  (setq holiday-general-holidays
    '((holiday-fixed 1 1 "Capodanno")
       (holiday-fixed 5 1 "Festa dei lavoratori")
       (holiday-fixed 4 25 "Festa della liberazione")
       (holiday-fixed 6 2 "Festa della repubblica")
       ))

  (setq holiday-christian-holidays
    '((holiday-fixed 12 8 "Immacolata concezione")
       (holiday-fixed 12 25 "Natale")
       (holiday-fixed 12 26 "Santo Stefano")
       (holiday-fixed 1 6 "Epifania")
       (holiday-easter-etc -52 "Giovedì grasso")
       (holiday-easter-etc -47 "Martedì grasso")
       (holiday-easter-etc  -2 "Venerdì Santo")
       (holiday-easter-etc   0 "Pasqua")
       (holiday-easter-etc  +1 "Lunedì di Pasqua")
       (holiday-fixed 8 15 "Assunzione di Maria")
       (holiday-fixed 11 1 "Ognissanti")))

  (setq calendar-holidays
    (append holiday-christian-holidays holiday-general-holidays))

  ;; Disable other holidays
  (setq hebrew-holidays nil)
  (setq islamic-holidays nil)
  (setq oriental-holidays nil)
  (setq general-holidays nil)

  ;; Other calendar/diary goodies
  (setq cal-tex-diary t)
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag t)
#+end_src

*** Custom toggles for white space mode and line numbers
I generally don't want line numbers on everything, so I have a quick one key toggle for enabling ~display-line-numbers-mode~ in the current buffer.

Similarly, I have another for ~whitespace-mode~ and one for ~visual-line-mode~

#+begin_src elisp :tangle init.el
  ;; Custom toggles
  (defun mil/toggle-line-numbers (args)
    "toggles display-line-numbers-mode"
    (interactive "P")
    (if (bound-and-true-p display-line-numbers-mode)
      (display-line-numbers-mode -1)
      (display-line-numbers-mode 1)))

  (defun mil/toggle-whitespace (args)
    "toggles whitespace-mode"
    (interactive "P")
    (if (bound-and-true-p whitespace-mode)
      (whitespace-mode -1)
      (whitespace-mode 1)))
  (defun mil/toggle-visual-line-mode (args)
    "toggles visual-line-mode"
    (interactive "P")
    (if(bound-and-true-p visual-line-mode)
      (visual-line-mode -1)
      (visual-line-mode 1)))

  (global-set-key (kbd "<f12>") 'mil/toggle-line-numbers)
  (global-set-key (kbd "S-<f12>") 'mil/toggle-whitespace)
  (global-set-key (kbd "C-<f12>") 'mil/toggle-visual-line-mode)
#+end_src




** External packages to possibly include


- ef-themes
- magit
- restclient or verb
- orderless
- vertico
- consult
